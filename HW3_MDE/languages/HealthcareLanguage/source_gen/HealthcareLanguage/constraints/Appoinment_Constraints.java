package HealthcareLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class Appoinment_Constraints extends BaseConstraintsDescriptor {
  public Appoinment_Constraints() {
    super(CONCEPTS.Appoinment$3Y);
  }

  public static class Start_Property extends BasePropertyConstraintsDescriptor {
    public Start_Property(ConstraintsDescriptor container) {
      super(PROPS.start$mL3Y, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castString(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:5b050995-38ca-45d9-8ebf-ae76aa376ae5(HealthcareLanguage.constraints)", "5533127218624668887"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, String propertyValue) {
      return (propertyValue.toString().matches("^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[0-2])/[0-9]{4}$") ? true : false);
    }
  }
  public static class End_Property extends BasePropertyConstraintsDescriptor {
    public End_Property(ConstraintsDescriptor container) {
      super(PROPS.end$mLiZ, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castString(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:5b050995-38ca-45d9-8ebf-ae76aa376ae5(HealthcareLanguage.constraints)", "5533127218624720173"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, String propertyValue) {
      Integer.parseInt(propertyValue.toString().split("/")[2]);
      return ((propertyValue.toString().matches("^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[0-2])/[0-9]{4}$") ? true : false)) && (propertyValue.toString().split("/")[2] + propertyValue.toString().split("/")[1] + propertyValue.toString().split("/")[0]).compareTo(SPropertyOperations.getString(node, PROPS.start$mL3Y).toString().split("/")[2] + SPropertyOperations.getString(node, PROPS.start$mL3Y).toString().split("/")[1] + SPropertyOperations.getString(node, PROPS.start$mL3Y).toString().split("/")[0]) >= 0;
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.start$mL3Y, new Start_Property(this));
    properties.put(PROPS.end$mLiZ, new End_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Appoinment$3Y = MetaAdapterFactory.getConcept(0x7f0568a28c1a4091L, 0xa87e390be85922c7L, 0x2f557f2e960a023fL, "HealthcareLanguage.structure.Appoinment");
  }

  private static final class PROPS {
    /*package*/ static final SProperty start$mL3Y = MetaAdapterFactory.getProperty(0x7f0568a28c1a4091L, 0xa87e390be85922c7L, 0x2f557f2e960a023fL, 0x2f557f2e960a0240L, "start");
    /*package*/ static final SProperty end$mLiZ = MetaAdapterFactory.getProperty(0x7f0568a28c1a4091L, 0xa87e390be85922c7L, 0x2f557f2e960a023fL, 0x2f557f2e960a0241L, "end");
  }
}
